<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Easy Reader - Tracing App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Baloo+2:wght@700;800&family=Tangerine:wght@700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f1f5f9; /* slate-100 */
        }
        .font-display {
            font-family: 'Baloo 2', cursive;
        }
        .font-script {
            font-family: 'Tangerine', cursive;
        }
        .card {
            background-color: white;
            border-radius: 1.5rem; /* 24px */
            padding: 1.5rem; /* 24px */
            box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.05), 0 8px 10px -6px rgb(0 0 0 / 0.05);
            border: 1px solid #e2e8f0; /* slate-200 */
            transition: all 0.3s ease;
        }
        @media (min-width: 768px) {
            .card {
                padding: 2.5rem; /* 40px */
            }
        }
        .btn {
            @apply px-6 py-3.5 rounded-xl font-bold text-white shadow-lg transform transition-all duration-150 ease-in-out;
            border-bottom: 4px solid rgba(0,0,0,0.2);
        }
        .btn:disabled {
            @apply bg-slate-300 border-slate-400 cursor-not-allowed shadow-none scale-100;
        }
        .btn:active {
            transform: scale(0.95) translateY(2px);
            border-bottom-width: 2px;
        }
        .btn-primary {
            @apply bg-orange-400 border-orange-600 hover:bg-orange-500;
        }
        .btn-secondary {
            @apply bg-sky-500 border-sky-700 hover:bg-sky-600;
        }
        .btn-success {
             @apply bg-lime-500 border-lime-700 hover:bg-lime-600;
        }
        #writingCanvasContainer {
            position: relative;
            background-color: #f8fafc; /* slate-50 */
            border-radius: 1rem;
            border: 2px solid #e2e8f0; /* slate-200 */
        }
        #writingCanvas, #templateCanvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 1rem;
        }
        #writingCanvas {
            z-index: 10;
            touch-action: none;
            cursor: crosshair;
        }
        #templateCanvas {
            z-index: 5;
        }
        .hidden {
            display: none;
        }
        .feedback-animation {
            animation: pop-in 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
        }
        @keyframes pop-in {
            0% { opacity: 0; transform: scale(0.7); }
            100% { opacity: 1; transform: scale(1); }
        }
        .gradient-text {
            @apply text-transparent bg-clip-text bg-gradient-to-r from-sky-500 to-cyan-500;
        }
        .star-filled {
            color: #facc15; /* yellow-400 */
            animation: star-pop 0.5s cubic-bezier(0.785, 0.135, 0.15, 0.86);
        }
        @keyframes star-pop {
            0% { transform: scale(0.5); }
            50% { transform: scale(1.5); }
            100% { transform: scale(1); }
        }
        @keyframes head-bob {
            0%, 100% { transform: rotate(-3deg); }
            50% { transform: rotate(3deg); }
        }
        .head-bob {
            animation: head-bob 1s ease-in-out infinite;
        }
        #certificate-card {
            border: 10px solid #ca8a04; /* yellow-600 */
            background: #fefce8; /* yellow-50 */
            position: relative;
        }
        #certificate-card::before {
            content: '';
            position: absolute;
            top: 5px;
            left: 5px;
            right: 5px;
            bottom: 5px;
            border: 2px solid #ca8a04;
            border-radius: 1.25rem;
        }
    </style>
</head>
<body class="bg-slate-100 min-h-screen flex items-center justify-center p-4">
    <div id="app-container" class="w-full max-w-md md:max-w-2xl lg:max-w-4xl mx-auto">
        
        <div id="local-file-warning" class="hidden bg-sky-100 border-l-4 border-sky-500 text-sky-700 p-4 rounded-lg mb-6" role="alert">
            <p class="font-bold">Notice</p>
            <p>For the best audio quality, a web server is recommended. The app is now using a standard browser voice as a fallback.</p>
        </div>


        <!-- Role Selection View -->
        <div id="role-selection-view" class="card text-center relative">
            <div id="default-owl-container" class="w-24 h-24 md:w-32 md:h-32 mx-auto mb-4">
                <!-- Default Owl SVG -->
            </div>
            <h1 class="font-display font-extrabold text-5xl md:text-6xl lg:text-7xl mb-4 gradient-text">Easy Reader</h1>
            <p class="text-slate-500 mb-8 md:mb-10 text-base md:text-lg">Who is using the app?</p>
            <div class="space-y-4">
                <button id="teacher-role-btn" class="btn btn-primary w-full text-lg md:text-xl">Teacher Mode</button>
                <button id="student-role-btn" class="btn btn-secondary w-full text-lg md:text-xl">Student Mode</button>
            </div>
        </div>

        <!-- Teacher Module -->
        <div id="teacher-view" class="hidden card">
            <button id="back-to-role-teacher" class="absolute top-6 left-6 text-slate-400 hover:text-slate-600 transition-colors">&larr; Back</button>
            <h2 class="font-display text-3xl md:text-4xl text-center text-orange-500 mb-8">Teacher Module</h2>
            <div class="space-y-4 mb-6">
                <input type="text" id="new-word-input" placeholder="Add a word (e.g., 'cat')" class="w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 transition-shadow">
                <button id="add-word-btn" class="btn btn-primary w-full">Add Word</button>
            </div>
            <div class="space-y-4">
                <textarea id="bulk-words-input" placeholder="Or paste a list of words, one per line." class="w-full px-4 py-3 border border-slate-300 rounded-lg h-32 focus:ring-2 focus:ring-orange-500 transition-shadow"></textarea>
                <button id="add-bulk-words-btn" class="btn btn-primary w-full">Add List</button>
            </div>
            <hr class="my-8 border-slate-200">
            <h3 class="font-display text-xl md:text-2xl text-center text-slate-700 mb-4">Word List</h3>
            <div id="word-list" class="space-y-2 max-h-60 overflow-y-auto pr-2">
                <!-- Word list will be rendered here -->
            </div>
        </div>

        <!-- Student Name Input -->
        <div id="student-name-view" class="hidden card text-center">
             <button id="back-to-role-student" class="absolute top-6 left-6 text-slate-400 hover:text-slate-600 transition-colors">&larr; Back</button>
            <h2 class="font-display text-4xl md:text-5xl text-sky-600 mb-4">Let's Read!</h2>
            <p class="text-slate-500 mb-8">Enter your name to start.</p>
            <input type="text" id="student-name-input" placeholder="Your name (optional)" class="w-full px-4 py-3 border border-slate-300 rounded-2xl text-center text-xl mb-6 focus:ring-2 focus:ring-sky-500 transition-shadow">
            <button id="start-session-btn" class="btn btn-secondary w-full text-xl">Start Playing</button>
            <div id="loading-container" class="hidden w-full mt-6">
                <div id="loading-owl-container" class="w-24 h-24 mx-auto mb-2">
                   <!-- Loading Owl SVG -->
                </div>
                <p id="loading-text" class="text-slate-500 mb-2">Preparing audio...</p>
                <div class="w-full bg-slate-200 rounded-full h-4 overflow-hidden">
                    <div id="progress-bar" class="bg-gradient-to-r from-sky-400 to-cyan-400 h-4 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
            </div>
        </div>

        <!-- Student Session -->
        <div id="student-session-view" class="hidden">
            <div id="writing-phase" class="card">
                <div class="flex justify-between items-center mb-6">
                    <span id="student-name-display-w" class="font-bold text-slate-700 text-lg"></span>
                    <span id="word-counter-w" class="text-sm font-semibold text-slate-500 mr-4"></span>
                </div>
                 <p class="text-center text-lg md:text-xl text-slate-600 mb-4 font-semibold">Trace the word on the board.</p>
                <div id="writingCanvasContainer" class="w-full h-56 md:h-72 lg:h-96 mb-4 relative">
                    <canvas id="templateCanvas"></canvas>
                    <canvas id="writingCanvas"></canvas>
                </div>
                <div class="flex space-x-4">
                    <button id="clear-canvas-btn" class="px-4 py-2 bg-slate-200 text-slate-600 rounded-xl hover:bg-slate-300 flex items-center justify-center space-x-2 transition-colors font-semibold active:scale-95">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                        <span>Clear</span>
                    </button>
                    <button id="check-handwriting-btn" class="btn btn-success flex-grow text-xl">Check!</button>
                     <button id="toggle-progress-btn" class="p-3.5 bg-slate-200 text-slate-600 rounded-xl hover:bg-slate-300 flex items-center justify-center transition-colors active:scale-95">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path></svg>
                    </button>
                </div>
            </div>
            
            <div id="score-card" class="card mt-4 hidden">
                <h3 class="font-display text-2xl md:text-3xl text-center text-slate-700 mb-4">Your Progress</h3>
                <div id="score-list" class="space-y-3 max-h-40 overflow-y-auto pr-2">
                    <!-- Progress will be rendered here -->
                </div>
            </div>
        </div>

        <!-- Certificate View -->
        <div id="certificate-view" class="hidden">
            <div id="certificate-card" class="card text-center relative">
                <div class="flex justify-center items-center gap-x-3 mb-4">
                    <svg class="w-10 h-10 text-yellow-600" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 256 256"><path d="M224,128a96,96,0,1,0-96,96,96,96,0,0,0,96-96Zm-40,4.28-64,32a8,8,0,1,1-7-14.56L164.73,128,113,106.28a8,8,0,1,1,7-14.56l64,32A8,8,0,0,1,184,132.28Z"/></svg>
                    <span class="font-display text-2xl text-yellow-700 font-bold tracking-widest">footprints</span>
                </div>
                <h2 class="font-display font-extrabold text-3xl md:text-5xl text-yellow-800">Certificate of Achievement</h2>
                <p class="text-slate-600 mt-4 text-base md:text-lg">This certificate is proudly presented to</p>
                <p id="cert-student-name" class="font-display text-4xl md:text-6xl my-4 text-transparent bg-clip-text bg-gradient-to-r from-sky-600 to-cyan-500"></p>
                <p class="text-slate-600 text-base md:text-lg">for successfully completing all the tracing words.</p>
                <div class="mt-8 md:mt-12 grid grid-cols-2 gap-4 md:gap-8">
                    <div class="text-center">
                        <p class="font-script text-2xl md:text-3xl text-slate-700">Mgr. Consuelo Gamboa O.</p>
                        <hr class="border-slate-400 mt-1">
                        <p class="text-sm text-slate-500">Principal</p>
                    </div>
                    <div class="text-center">
                        <p class="font-script text-2xl md:text-3xl text-slate-700">Ing. Milko Gonzales C.</p>
                        <hr class="border-slate-400 mt-1">
                        <p class="text-sm text-slate-500">Teacher</p>
                    </div>
                </div>
                 <p id="cert-date" class="font-semibold text-slate-500 text-sm mt-8"></p>
            </div>
             <div class="mt-6 flex flex-col md:flex-row gap-4">
                <button id="download-pdf-btn" class="btn btn-primary w-full text-lg md:text-xl">Download PDF</button>
                <button id="email-btn" class="btn btn-primary w-full text-lg md:text-xl">Email to Director</button>
             </div>
             <button id="play-again-btn" class="btn btn-secondary w-full text-lg md:text-xl mt-4">Play Again</button>
        </div>
        
        <div id="feedback-overlay" class="hidden fixed inset-0 bg-black/40 flex items-center justify-center z-50 p-4">
            <div id="feedback-card" class="card text-center feedback-animation">
                 <div id="happy-owl-container" class="w-32 h-32 mx-auto hidden">
                    <!-- Happy Owl SVG -->
                </div>
                <div id="sad-owl-container" class="w-32 h-32 mx-auto hidden">
                    <!-- Sad Owl SVG -->
                </div>
                <p id="feedback-message" class="font-display text-3xl md:text-4xl mt-4"></p>
            </div>
        </div>

    </div>

    <script type="module">
        let sessionWords = [];
        let currentWordObject = null;
        const audioCache = {};
        
        const BASE_REPS = 3;
        const FAILED_REPS = 5; 

        // --- DEFAULT WORD LIST ---
        const defaultWords = ['cat', 'dog', 'sun', 'hat', 'run', 'bed', 'pig', 'top', 'cup', 'pen', 'map', 'log', 'sit', 'fan'];

        const views = {
            roleSelection: document.getElementById('role-selection-view'),
            teacher: document.getElementById('teacher-view'),
            studentName: document.getElementById('student-name-view'),
            studentSession: document.getElementById('student-session-view'),
            certificate: document.getElementById('certificate-view'),
        };
        const teacherRoleBtn = document.getElementById('teacher-role-btn');
        const studentRoleBtn = document.getElementById('student-role-btn');
        const backToRoleTeacherBtn = document.getElementById('back-to-role-teacher');
        const backToRoleStudentBtn = document.getElementById('back-to-role-student');
        const addWordBtn = document.getElementById('add-word-btn');
        const newWordInput = document.getElementById('new-word-input');
        const addBulkWordsBtn = document.getElementById('add-bulk-words-btn');
        const bulkWordsInput = document.getElementById('bulk-words-input');
        const wordListDiv = document.getElementById('word-list');
        const startSessionBtn = document.getElementById('start-session-btn');
        const studentNameInput = document.getElementById('student-name-input');
        
        const canvasContainer = document.getElementById('writingCanvasContainer');
        const writingCanvas = document.getElementById('writingCanvas');
        const templateCanvas = document.getElementById('templateCanvas');
        const writingCtx = writingCanvas.getContext('2d');
        const templateCtx = templateCanvas.getContext('2d');

        const checkHandwritingBtn = document.getElementById('check-handwriting-btn');
        const clearCanvasBtn = document.getElementById('clear-canvas-btn');
        const feedbackOverlay = document.getElementById('feedback-overlay');
        const feedbackCard = document.getElementById('feedback-card');
        const feedbackMessage = document.getElementById('feedback-message');
        const scoreCard = document.getElementById('score-card');
        const scoreListDiv = document.getElementById('score-list');
        const toggleProgressBtn = document.getElementById('toggle-progress-btn');

        const localFileWarning = document.getElementById('local-file-warning');

        const certStudentName = document.getElementById('cert-student-name');
        const certDate = document.getElementById('cert-date');
        const playAgainBtn = document.getElementById('play-again-btn');
        const downloadPdfBtn = document.getElementById('download-pdf-btn');
        const emailBtn = document.getElementById('email-btn');

        // --- OWL SVGs ---
        const defaultOwlSVG = `<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><g><path d="M50,15 C27.9,15 10,32.9 10,55 C10,77.1 27.9,95 50,95 C72.1,95 90,77.1 90,55 C90,32.9 72.1,15 50,15 Z" fill="#c084fc"/><path d="M50,20 C30.7,20 15,35.7 15,55 C15,74.3 30.7,90 50,90 C69.3,90 85,74.3 85,55 C85,35.7 69.3,20 50,20 Z" fill="#e9d5ff"/><path d="M35.1,61.5c-4.8-1.8-8.1-6.4-8.1-11.5c0-6.9,5.6-12.5,12.5-12.5s12.5,5.6,12.5,12.5c0,0.1,0,0.2,0,0.3c-2.3-1.9-5.2-3-8.4-3c-6.2,0-11.5,4.3-12.9,10.1L35.1,61.5z" fill="#f3e8ff"/><path d="M64.9,61.5c4.8-1.8,8.1-6.4,8.1-11.5c0-6.9-5.6-12.5-12.5-12.5S48,43.1,48,50c0,0.1,0,0.2,0,0.3c2.3-1.9,5.2-3,8.4-3c6.2,0,11.5,4.3,12.9,10.1L64.9,61.5z" fill="#f3e8ff"/><circle cx="35" cy="50" r="14" fill="white"/><circle cx="65" cy="50" r="14" fill="white"/><circle cx="38" cy="53" r="6" fill="black"/><circle cx="62" cy="53" r="6" fill="black"/><path d="M47,68 C47,70.8,48.2,73,50,73 C51.8,73,53,70.8,53,68 L47,68 Z" fill="#f97316"/><path d="M18,55 L8,45 C13,35 23,30 33,30 C38,30 43,32 48,35 C53,32 58,30 63,30 C73,30 83,35 88,45 L78,55" fill="#c084fc"/></g></svg>`;
        const loadingOwlSVG = `<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><g class="head-bob">${defaultOwlSVG}</g><path d="M20,45 a15,15 0 0,1 0,20 l-10,0 a20,20 0 0,0 0,-30 l10,5z" fill="#38bdf8"/><path d="M80,45 a15,15 0 0,0 0,20 l10,0 a20,20 0 0,1 0,-30 l-10,5z" fill="#38bdf8"/><path d="M22,43 C15,43 15,67 22,67" stroke-width="5" stroke-linecap="round" stroke="#0ea5e9" fill="none"/></svg>`;
        const happyOwlSVG = `<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><g><path d="M50,15 C27.9,15 10,32.9 10,55 C10,77.1 27.9,95 50,95 C72.1,95 90,77.1 90,55 C90,32.9 72.1,15 50,15 Z" fill="#a78bfa"/><path d="M50,20 C30.7,20 15,35.7 15,55 C15,74.3 30.7,90 50,90 C69.3,90 85,74.3 85,55 C85,35.7 69.3,20 50,20 Z" fill="#e9d5ff"/><path d="M28,48 C30,45 35,45 37,48 C39,51 35,55 33,52 C31,49 28,48 28,48z" fill="black"/><path d="M72,48 C70,45 65,45 63,48 C61,51 65,55 67,52 C69,49 72,48 72,48z" fill="black"/><path d="M47,68 C47,70.8,48.2,73,50,73 C51.8,73,53,70.8,53,68 L47,68 Z" fill="#f97316"/><path d="M18,55 L8,45 C13,35 23,30 33,30 C38,30 43,32 48,35 C53,32 58,30 63,30 C73,30 83,35 88,45 L78,55" fill="#c084fc"/></g></svg>`;
        const sadOwlSVG = `<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><g><path d="M50,15 C27.9,15 10,32.9 10,55 C10,77.1 27.9,95 50,95 C72.1,95 90,77.1 90,55 C90,32.9 72.1,15 50,15 Z" fill="#a78bfa"/><path d="M50,20 C30.7,20 15,35.7 15,55 C15,74.3 30.7,90 50,90 C69.3,90 85,74.3 85,55 C85,35.7 69.3,20 50,20 Z" fill="#e9d5ff"/><path d="M30,55 C32,58 37,58 39,55 C41,52 37,48 35,51 C33,54 30,55 30,55z" fill="black"/><path d="M70,55 C68,58 63,58 61,55 C59,52 63,48 65,51 C67,54 70,55 70,55z" fill="black"/><path d="M48,73 C48,71.2 49,70 50,70 C51,70 52,71.2 52,73 L48,73 Z" fill="#f97316"/><path d="M18,55 L8,45 C13,35 23,30 33,30 C38,30 43,32 48,35 C53,32 58,30 63,30 C73,30 83,35 88,45 L78,55" fill="#c084fc"/></g></svg>`;

        
        const showView = (viewId) => {
            Object.values(views).forEach(view => view.classList.add('hidden'));
            if (views[viewId]) views[viewId].classList.remove('hidden');
        };

        teacherRoleBtn.addEventListener('click', () => {
            renderWordList();
            showView('teacher');
        });
        studentRoleBtn.addEventListener('click', () => showView('studentName'));
        backToRoleTeacherBtn.addEventListener('click', () => showView('roleSelection'));
        backToRoleStudentBtn.addEventListener('click', () => showView('roleSelection'));
        startSessionBtn.addEventListener('click', startSession);
        
        // --- WORD MANAGEMENT (LOCALSTORAGE) ---
        function getWords() {
            const storedWords = localStorage.getItem('easyReaderWords');
            return storedWords ? JSON.parse(storedWords) : [...defaultWords];
        }

        function saveWords(words) {
            localStorage.setItem('easyReaderWords', JSON.stringify(words));
        }

        function renderWordList() {
            const words = getWords();
            wordListDiv.innerHTML = '';
            if (words.length === 0) {
                wordListDiv.innerHTML = '<p class="text-slate-500 text-center">No words yet.</p>';
                return;
            }
            words.forEach(word => {
                const wordEl = document.createElement('div');
                wordEl.className = 'flex justify-between items-center bg-slate-100 p-3 rounded-lg';
                wordEl.innerHTML = `
                    <span class="font-semibold text-slate-700">${word}</span>
                    <button data-word="${word}" class="delete-word-btn text-red-500 hover:text-red-700 font-bold">X</button>
                `;
                wordListDiv.appendChild(wordEl);
            });
        }
        
        wordListDiv.addEventListener('click', e => {
            if (e.target.classList.contains('delete-word-btn')) {
                const wordToDelete = e.target.dataset.word;
                let words = getWords();
                words = words.filter(word => word !== wordToDelete);
                saveWords(words);
                renderWordList();
            }
        });

        addWordBtn.addEventListener('click', () => {
            const word = newWordInput.value.trim().toLowerCase();
            if (!word) return;
            const words = getWords();
            if (!words.includes(word)) {
                words.push(word);
                saveWords(words);
                renderWordList();
            }
            newWordInput.value = '';
        });

        addBulkWordsBtn.addEventListener('click', () => {
            const bulkText = bulkWordsInput.value.trim();
            if (!bulkText) return;
            const wordsToAdd = bulkText.split('\n').map(w => w.trim().toLowerCase()).filter(Boolean);
            let words = getWords();
            wordsToAdd.forEach(word => {
                if (!words.includes(word)) {
                    words.push(word);
                }
            });
            saveWords(words);
            renderWordList();
            bulkWordsInput.value = '';
        });
        
        // --- AUDIO LOGIC (TTS & PRE-CACHING) ---
        const delay = ms => new Promise(res => setTimeout(res, ms));
        function base64ToArrayBuffer(base64){const binaryString=window.atob(base64);const len=binaryString.length;const bytes=new Uint8Array(len);for(let i=0;i<len;i++){bytes[i]=binaryString.charCodeAt(i)}return bytes.buffer}
        function pcmToWav(pcmData,sampleRate){const numChannels=1;const bitsPerSample=16;const blockAlign=(numChannels*bitsPerSample)/8;const byteRate=sampleRate*blockAlign;const dataSize=pcmData.byteLength;const buffer=new ArrayBuffer(44+dataSize);const view=new DataView(buffer);view.setUint32(0,0x52494646,false);view.setUint32(4,36+dataSize,true);view.setUint32(8,0x57415645,false);view.setUint32(12,0x666d7420,false);view.setUint32(16,16,true);view.setUint16(20,1,true);view.setUint16(22,numChannels,true);view.setUint32(24,sampleRate,true);view.setUint32(28,byteRate,true);view.setUint16(32,blockAlign,true);view.setUint16(34,bitsPerSample,true);view.setUint32(36,0x64617461,false);view.setUint32(40,dataSize,true);const pcm16=new Int16Array(pcmData);for(let i=0;i<pcm16.length;i++){view.setInt16(44+i*2,pcm16[i],true)}return new Blob([view],{type:'audio/wav'})}
        
        async function generateAndCacheAudio(text) {
            if (audioCache[text]) return;
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;
            const payload = {
                contents: [{ parts: [{ text: `Say the following clearly for a child: '${text}'` }] }],
                generationConfig: { responseModalities: ["AUDIO"], speechConfig: { voiceConfig: { prebuiltVoiceConfig: { voiceName: "Vindemiatrix" } } } },
                model: "gemini-2.5-flash-preview-tts"
            };
            
            for (let i = 0; i < 3; i++) { // Retry up to 3 times
                try {
                    const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                    if (!response.ok) { throw new Error(`API request failed with status ${response.status}`); }
                    const result = await response.json();
                    const candidate = result?.candidates?.[0];
                    const part = candidate?.content?.parts?.[0];
                    const audioData = part?.inlineData?.data;
                    const mimeType = part?.inlineData?.mimeType;
                    if (audioData && mimeType?.startsWith("audio/")) {
                        const sampleRateMatch = mimeType.match(/rate=(\d+)/);
                        const sampleRate = sampleRateMatch ? parseInt(sampleRateMatch[1], 10) : 24000;
                        const pcmData = base64ToArrayBuffer(audioData);
                        const wavBlob = pcmToWav(pcmData, sampleRate);
                        audioCache[text] = URL.createObjectURL(wavBlob);
                        return; // Success, exit loop
                    } else { console.error(`TTS API response format unexpected for "${text}":`, result); }
                } catch (error) { console.error(`Attempt ${i+1} - Network error for "${text}":`, error); }
                await delay(1000 * (i + 1)); // Exponential backoff
            }
        }
        
        function playFallbackAudio(text) {
            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'en-US';
                window.speechSynthesis.speak(utterance);
            } else {
                console.error("Browser does not support Speech Synthesis API.");
            }
        }

        async function playAudio(text) {
            if (!audioCache[text] && (window.location.protocol === 'http:' || window.location.protocol === 'https:')) {
                await generateAndCacheAudio(text);
            }
            if (audioCache[text]) {
                const audio = new Audio(audioCache[text]);
                audio.play();
            } else {
                console.warn(`Could not fetch high-quality audio for "${text}". Using fallback.`);
                playFallbackAudio(text);
            }
        }

        // --- TRACING CANVAS LOGIC ---
        let drawing=false;
        function resizeAllCanvas(){
            const rect = canvasContainer.getBoundingClientRect();
            [writingCanvas, templateCanvas].forEach(c => {
                c.width = rect.width;
                c.height = rect.height;
            });
            writingCtx.strokeStyle='#0ea5e9'; // sky-500
            writingCtx.lineWidth=16;
            writingCtx.lineCap='round';
            writingCtx.lineJoin = 'round';
            if(currentWordObject) drawTemplate(currentWordObject.word);
        }

        function startPosition(e){drawing=true;draw(e)}
        function endPosition(){drawing=false;writingCtx.beginPath()}
        function draw(e){if(!drawing)return;e.preventDefault();const rect=writingCanvas.getBoundingClientRect();let x,y;if(e.touches){x=e.touches[0].clientX-rect.left;y=e.touches[0].clientY-rect.top}else{x=e.clientX-rect.left;y=e.clientY-rect.top}
        writingCtx.lineTo(x,y);writingCtx.stroke();writingCtx.beginPath();writingCtx.moveTo(x,y)}
        function clearWritingCanvas(){ writingCtx.clearRect(0,0,writingCanvas.width,writingCanvas.height); }

        writingCanvas.addEventListener('mousedown',startPosition);
        writingCanvas.addEventListener('mouseup',endPosition);
        writingCanvas.addEventListener('mousemove',draw);
        writingCanvas.addEventListener('touchstart',startPosition);
        writingCanvas.addEventListener('touchend',endPosition);
        writingCanvas.addEventListener('touchmove',draw);
        clearCanvasBtn.addEventListener('click',clearWritingCanvas);
        window.addEventListener('resize',resizeAllCanvas);
        
        function showFeedbackWithOwl(state, message, duration = 1500) {
            happyOwlContainer.classList.add('hidden');
            sadOwlContainer.classList.add('hidden');
            if (state === 'success') {
                happyOwlContainer.classList.remove('hidden');
            } else {
                sadOwlContainer.classList.remove('hidden');
            }
            feedbackMessage.textContent = message;
            feedbackCard.className = 'card text-center feedback-animation';
            feedbackMessage.classList.toggle('text-emerald-600', state === 'success');
            feedbackMessage.classList.toggle('text-red-600', state !== 'success');
            feedbackOverlay.classList.remove('hidden');
            setTimeout(() => feedbackOverlay.classList.add('hidden'), duration);
        }

        async function startSession() {
            const studentName=studentNameInput.value.trim()||'Student';
            document.getElementById('student-name-display-w').textContent = studentName;
            const wordsFromDb = getWords();

            if (wordsFromDb.length === 0) { alert("No words in the list. Please ask the teacher to add some."); return; }
            
            sessionWords = wordsFromDb.map(word => ({ word: word, successes: 0, failures: 0, requiredReps: BASE_REPS }));
            showView('studentSession');
            resizeAllCanvas();
            updateScoreList();
            
            playAudio("Trace the word on the board");
            setTimeout(setupNextWord, 2500);
        }
        
        function setupNextWord() {
            const activeWords = sessionWords.filter(w => w.successes < w.requiredReps);
            if (activeWords.length === 0) {
                showCertificate();
                return;
            }
            currentWordObject = activeWords[Math.floor(Math.random() * activeWords.length)];
            const totalWords = sessionWords.length;
            const completedWords = totalWords - activeWords.length;
            const currentIndex = sessionWords.findIndex(w => w.word === currentWordObject.word) + 1;
            document.getElementById('word-counter-w').textContent = `Word ${currentIndex} / ${totalWords}`;
            setupWritingPhase();
        }
        
        function showCertificate() {
            certStudentName.textContent = studentNameInput.value.trim() || 'Awesome Student';
            certDate.textContent = new Date().toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            showView('certificate');
        }
        
        playAgainBtn.addEventListener('click', () => {
            showView('roleSelection');
        });

        downloadPdfBtn.addEventListener('click', () => {
            const certificateElement = document.getElementById('certificate-card');
            const studentName = certStudentName.textContent.replace(/ /g, '_');;
            html2canvas(certificateElement, { 
                scale: 3,
                useCORS: true,
                backgroundColor: null,
                onclone: (document) => {
                    const style = document.createElement('style');
                    style.innerHTML = `
                        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Baloo+2:wght@700;800&family=Tangerine:wght@700&display=swap');
                        .font-script { font-family: 'Tangerine', cursive !important; }
                        .font-display { font-family: 'Baloo 2', cursive !important; }
                    `;
                    document.head.appendChild(style);
                }
            }).then(canvas => {
                const imgData = canvas.toDataURL('image/png');
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF({
                    orientation: 'landscape',
                    unit: 'px',
                    format: [canvas.width, canvas.height]
                });
                pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height);
                pdf.save(`Certificate_${studentName}.pdf`);
            });
        });

        emailBtn.addEventListener('click', () => {
            const studentName = certStudentName.textContent;
            const subject = encodeURIComponent(`Certificate of Achievement for ${studentName}`);
            const body = encodeURIComponent(`Dear Principal,\n\nPlease find attached the certificate of achievement for ${studentName}, who has successfully completed the Easy Reader tracing program.\n\nThank you.`);
            window.location.href = `mailto:director@footprints.edu.bo?subject=${subject}&body=${body}`;
        });


        function setupWritingPhase() {
            clearWritingCanvas();
            checkHandwritingBtn.disabled = false;
            drawTemplate(currentWordObject.word);
            playAudio(currentWordObject.word);
        }
        
        function drawTemplate(word) {
            templateCtx.clearRect(0, 0, templateCanvas.width, templateCanvas.height);
            templateCtx.fillStyle = '#e2e8f0'; // slate-200
            templateCtx.textAlign = 'center';
            templateCtx.textBaseline = 'middle';
            let fontSize = templateCanvas.height * 0.7; // Responsive font size
            templateCtx.font = `bold ${fontSize}px 'Baloo 2', cursive`;
            while(templateCtx.measureText(word).width > templateCanvas.width - 60) {
                fontSize -= 10;
                templateCtx.font = `bold ${fontSize}px 'Baloo 2', cursive`;
            }
            templateCtx.fillText(word, templateCanvas.width / 2, templateCanvas.height / 2);
        }
        
        function verifyTrace() {
            const templateData = templateCtx.getImageData(0, 0, templateCanvas.width, templateCanvas.height).data;
            const drawingData = writingCtx.getImageData(0, 0, writingCanvas.width, writingCanvas.height).data;
            let templatePixelCount = 0;
            let tracedPixelCount = 0;
            for (let i = 0; i < templateData.length; i += 4) {
                if (templateData[i + 3] > 0) { templatePixelCount++; if (drawingData[i + 3] > 0) { tracedPixelCount++; } }
            }
            if (templatePixelCount === 0) return false;
            const tracePercentage = (tracedPixelCount / templatePixelCount) * 100;
            console.log(`Trace percentage: ${tracePercentage.toFixed(2)}%`);
            return tracePercentage > 50;
        }

        function updateScoreList() {
            scoreListDiv.innerHTML = '';
            if (sessionWords.length === 0) return;
            sessionWords.forEach(wordData => {
                const scoreEl = document.createElement('div');
                scoreEl.className = 'grid grid-cols-2 items-center text-center font-semibold gap-4';
                
                let starsHTML = '<div class="flex items-center justify-end">';
                for (let i = 0; i < wordData.requiredReps; i++) {
                    const starClass = i < wordData.successes ? 'text-yellow-400 star-filled' : 'text-slate-300';
                    starsHTML += `<svg class="w-6 h-6 ${starClass}" fill="currentColor" viewBox="0 0 20 20"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path></svg>`;
                }
                starsHTML += '</div>';

                scoreEl.innerHTML = `
                    <span class="text-left text-slate-700 font-bold text-lg">${wordData.word}</span>
                    ${starsHTML}
                `;
                scoreListDiv.appendChild(scoreEl);
            });
        }

        checkHandwritingBtn.addEventListener('click', async () => {
            if (!currentWordObject) return;
            const isTracedCorrectly = verifyTrace();
            if (isTracedCorrectly) {
                currentWordObject.successes++;
                playAudio(currentWordObject.word);
                updateScoreList();
                checkHandwritingBtn.disabled = true;
                showFeedbackWithOwl('success', 'Great Job!', 1200);
                setTimeout(setupNextWord, 1300);
            } else {
                currentWordObject.failures++;
                if (currentWordObject.requiredReps === BASE_REPS && currentWordObject.failures > 0) {
                    currentWordObject.requiredReps = FAILED_REPS;
                }
                showFeedbackWithOwl('failure', 'Almost!', 1500);
                const phrases = ["Try again", "You can do it", "Almost there"];
                const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
                playAudio(randomPhrase);
                updateScoreList();
                clearWritingCanvas();
            }
        });
        
        toggleProgressBtn.addEventListener('click', () => {
            scoreCard.classList.toggle('hidden');
        });

        window.onload = () => {
             if (window.location.protocol !== 'http:' && window.location.protocol !== 'https:') {
                localFileWarning.classList.remove('hidden');
            }
            document.getElementById('default-owl-container').innerHTML = defaultOwlSVG;
            document.getElementById('loading-owl-container').innerHTML = loadingOwlSVG;
            document.getElementById('happy-owl-container').innerHTML = happyOwlSVG;
            document.getElementById('sad-owl-container').innerHTML = sadOwlSVG;
            showView('roleSelection');
        };
    </script>
</body>
</html>

